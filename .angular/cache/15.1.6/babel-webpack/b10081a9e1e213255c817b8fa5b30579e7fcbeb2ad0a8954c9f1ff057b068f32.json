{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookmarkService {\n  constructor(http) {\n    this.http = http;\n    this.jsonURL = 'assets/bookmark.json';\n    this.storageName = 'bookmark_list';\n    this.bookmarks = [];\n    this.categories = [\"Category A\", \"Category B\"];\n  }\n  getAllBookmarks() {\n    return this.http.get(this.jsonURL);\n  }\n  getStorageBookmarks() {\n    return JSON.parse(localStorage.getItem(this.storageName));\n  }\n  // getBookmarkDetails(id: number): Observable<Bookmark>{\n  //   this.getAllBookmarks().subscribe(data => {\n  //     console.log(data);\n  //     this.bookmark = data.find(itemInArray => itemInArray.id === id);\n  //   });\n  //   return this.bookmark;\n  // }\n  getCategories() {\n    return this.categories;\n  }\n  addBookmark(bookmark) {\n    // const httpOptions = {\n    //   headers: {\n    //     'Content-Type': 'application/json'\n    //   }\n    // };\n    // return this.http.post<Bookmark>(this.jsonURL,{ title, url, category}, httpOptions);\n    this.bookmarks.push(bookmark);\n    localStorage.setItem(this.storageName, JSON.stringify(this.bookmark));\n    return this.getStorageBookmarks();\n  }\n}\nBookmarkService.ɵfac = function BookmarkService_Factory(t) {\n  return new (t || BookmarkService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookmarkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookmarkService,\n  factory: BookmarkService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,eAAe;EAQ1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANxB,YAAO,GAAG,sBAAsB;IAChC,gBAAW,GAAG,eAAe;IAC7B,cAAS,GAAe,EAAE;IAE1B,eAAU,GAAU,CAAC,YAAY,EAAC,YAAY,CAAC;EAER;EAEvCC,eAAe;IACb,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,IAAI,CAACC,OAAO,CAAC;EAChD;EAEAC,mBAAmB;IACjB,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC;EAC3D;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,aAAa;IACX,OAAO,IAAI,CAACC,UAAU;EACxB;EAEAC,WAAW,CAAEC,QAAkB;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACC,SAAS,CAACC,IAAI,CAACF,QAAQ,CAAC;IAC7BN,YAAY,CAACS,OAAO,CAAC,IAAI,CAACP,WAAW,EAAEJ,IAAI,CAACY,SAAS,CAAC,IAAI,CAACJ,QAAQ,CAAC,CAAC;IACrE,OAAO,IAAI,CAACT,mBAAmB,EAAE;EACnC;;AAxCWN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAoB,SAAfpB,eAAe;EAAAqB,YAFd;AAAM","names":["BookmarkService","constructor","http","getAllBookmarks","get","jsonURL","getStorageBookmarks","JSON","parse","localStorage","getItem","storageName","getCategories","categories","addBookmark","bookmark","bookmarks","push","setItem","stringify","factory","providedIn"],"sourceRoot":"","sources":["/Users/preety/Desktop/SeliseInterview/selise/src/app/services/bookmark.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Bookmark } from '../interfaces/bookmark';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookmarkService {\n\n  jsonURL = 'assets/bookmark.json';\n  storageName = 'bookmark_list';\n  bookmarks: Bookmark[] = [];\n  bookmark!: any;\n  categories: any[] = [\"Category A\",\"Category B\"];\n\n  constructor(private http: HttpClient) {}\n\n  getAllBookmarks(): Observable<Bookmark[]> {\n    return this.http.get<Bookmark[]>(this.jsonURL);\n  }\n\n  getStorageBookmarks() {\n    return JSON.parse(localStorage.getItem(this.storageName));\n  }\n\n  // getBookmarkDetails(id: number): Observable<Bookmark>{\n  //   this.getAllBookmarks().subscribe(data => {\n  //     console.log(data);\n  //     this.bookmark = data.find(itemInArray => itemInArray.id === id);\n  //   });\n  //   return this.bookmark;\n  // }\n\n  getCategories() {\n    return this.categories;\n  }\n\n  addBookmark (bookmark: Bookmark) {\n    // const httpOptions = {\n    //   headers: {\n    //     'Content-Type': 'application/json'\n    //   }\n    // };\n    // return this.http.post<Bookmark>(this.jsonURL,{ title, url, category}, httpOptions);\n    this.bookmarks.push(bookmark);\n    localStorage.setItem(this.storageName, JSON.stringify(this.bookmark));\n    return this.getStorageBookmarks();\n  }\n\n  // setBookmark(id: number){\n  //   this.bookmark = this.bookmarks.find(itemInArray => itemInArray.id === id);\n  // }\n  // getBookmark() {\n  //   return this.bookmark;\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}